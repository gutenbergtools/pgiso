#!/usr/local/bin/perl 

#######################################
# Coded by Craig Stephenson           #
# Arctic Region Supercomputing Center #
# University of Alaska Fairbanks      #
# August 2005                         #
#######################################

use XML::LibXML;
use DBI;
use File::Basename;
use File::stat;
use Switch;

# set the paths
my $path = "/home/cstephen/pgiso/pgrdf/";
my $mirrorpath = "/data1/ftp/mirrors/gutenberg/";

# create an array of valid formats to search for
#my @formats = ("htm","mid","mp3","pdb","pdf","ps","tex","txt","zip-avi",
#               "zip-htm","zip-mov","zip-mpg","zip-txt","zip-wmv");

my %mimetypes = (
#  "text/plain; charset=\"utf-8\"" => "txt-utf8",
#  "text/plain; charset=\"us-ascii\"" => "txt-usascii",
  "text/plain" => "txt",
  "text/html" => "htm",
  "text/rtf" => "rtf",
  "text/xml" => "xml",
  "application/pdf" => "pdf",
  "application/vnd.palm" => "pdb",
  "application/postscript" => "ps",
  "application/octet-stream; type=\"MS Video (avi)\"" => "avi",
  "application/octet-stream; type=\"MS Lit for PocketPC (lit)\"" => "lit",
  "application/octet-stream; type=\"MS Word Document (doc)\"" => "doc",
  "application/octet-stream; type=\"MS Wave Audio\"" => "wav",
  "application/octet-stream; type=\"TeX (tex)\"" => "tex",
  "application/octet-stream; type=\"MIDI (mid)\"" => "mid",
  "application/octet-stream; type=\"LilyPond (ly)\"" => "ly",
  "video/mpeg" => "mpg",
  "video/quicktime" => "mov",
  "audio/mpeg" => "mp3",
  "audio/midi" => "mid",
#  "audio/midi" => "midi",
  "image/jpeg" => "jpg",
  "image/tiff" => "tif"
);
 
# MySQL connection info
my $mysql_host = "localhost";
my $mysql_sock = "/tmp/mysql.sock";
my $mysql_database = "gutenberg";
my $mysql_username = "pgdbupdate";
my $mysql_password = "sealab2021";

# connect to MySQL and prepare for UTF-8 input/output
my $dbh = DBI->connect("DBI:mysql:mysql_socket=$mysql_sock:$mysql_database:$mysql_host", $mysql_username, $mysql_password);
$dbh->do("SET NAMES 'utf8'");

# download and decompress rdf catalog file
system("rm " . $path . "catalog.rdf.bz2 " . $path . "catalog.rdf 2> /dev/null");
system("wget -q -O " . $path . "catalog.rdf.bz2 http://www.gutenberg.org/feeds/catalog.rdf.bz2");
system("bunzip2 " . $path . "catalog.rdf.bz2");

# catalog.rdf is in utf-8 so stdout should be utf-8 too
binmode(STDOUT, ':utf8');

# parse catalog.rdf
my $parser = XML::LibXML->new();
$parser->keep_blanks (0);
my $doc = $parser->parse_file($path . 'catalog.rdf');

# %books stores the XML metadata, it looks like this:
#
# %books --> (etext_no) --> titles
#                       \-> authors
#                       \-> language
#                       \-> files --> txt --> (file URLs)
#                                 \-> zip-txt --> (file URLs)
#                                 \-> htm --> (file URLs)
#                                 \-> zip-htm --> (file URLs)
#                                 \-> ...
my %books;

# parse book nodes
my @booknodes = $doc->findnodes('/rdf:RDF/pgterms:etext');

foreach my $booknode(@booknodes)
{
  # this is a book description node
  my $etext_no = $booknode->getAttribute('ID');
  $etext_no =~ s/^etext//;
  my $o = {};

  foreach $title ($booknode->findnodes('dc:title//text()'))
  {
    push @{$o->{'titles'}}, $title->textContent;
  }
  foreach $creator ($booknode->findnodes('dc:creator//text()'))
  {
    push @{$o->{'authors'}}, $creator->textContent;
  }
  foreach $language ($booknode->findnodes('dc:language//text()'))
  {
    push @{$o->{'language'}}, $language->textContent;
  }
  foreach $rights ($booknode->findnodes('dc:rights//text()'))
  {
    push @{$o->{'rights'}}, $rights->textContent;
  }
  $books{$etext_no} = $o;
}

# release some memory
@booknodes = undef;

# parse file nodes
my @filenodes = $doc->findnodes('/rdf:RDF/pgterms:file');

foreach my $filenode (@filenodes)
{
  foreach my $n ($filenode->findnodes('dcterms:isFormatOf'))
  {
    my @vnformats;

    # this is a file description node
    my $etext_no = $n->getAttribute('resource');
    $etext_no =~ s/^\#etext//;
    foreach my $fn ($filenode->findnodes('dc:format'))
    {
      my @imtns = $fn->findnodes('dcterms:IMT');
      my $imtn = pop(@imtns);
      my @vns = $imtn->findnodes('rdf:value');
      my $vn = pop(@vns);
      push @vnformats, $vn->textContent;
    }

#$success = 0;
    foreach my $mime(keys %mimetypes)
    {
      $qmime = quotemeta($mime);
      if(grep(/application\/zip/, @vnformats) && grep(/$qmime/, @vnformats))
      {
        my $zipsymbol = "zip-" . $mimetypes{$mime};
        $relpath = $filenode->getAttribute('about');
        $relpath =~ s/http:\/\/www\.gutenberg\.org\/dirs\///;
        push @{$books{$etext_no}->{'files'}{$zipsymbol}}, $relpath;
#$success = 1;
        last;
      }
      elsif(grep(/$qmime/, @vnformats))
      {
        $relpath = $filenode->getAttribute('about');
        $relpath =~ s/http:\/\/www\.gutenberg\.org\/dirs\///;
        push @{$books{$etext_no}->{'files'}{$mimetypes{$mime}}}, $relpath;
#$success = 1;
        last;
      }
    }
#if($success == 0)
#{
#print $etext_no . "  ";
#foreach $vnformat(@vnformats)
#{
#print $vnformat . "  ";
#}
#print "\n";
#}
  }
}

# release some memory
@filenodes = undef;
$doc = undef;

while(my ($etext_no, $o) = each(%books))
{
print $etext_no . "\n";

  my $titles;
  my $authors;
  my $language;
  my $copyrighted;

  foreach(@{$o->{'titles'}})
  {
    $titles .= "$_;";
  }
  chop($titles); 

  foreach(@{$o->{'authors'}})
  {
    $authors .= "$_;";
  }
  chop($authors);

  foreach(@{$o->{'language'}})
  {
    $language .= substr($_, 0, 2) . ";";
  }
  chop($language);

  foreach(@{$o->{'rights'}})
  {
    if($_ eq "Copyrighted work. See license inside work.")
    {
      $copyrighted = 1;
    }
  }

#  if(exists $books{$etext_no}->{'files'}{'mp3'})
#  {
#    foreach my $key(keys %{$books{$etext_no}->{'files'}})
#    {
#      if($key ne "mp3")
#      {
#        while(my $temp = pop @{$books{$etext_no}->{'files'}{$key}})
#        {
#          push @{$books{$etext_no}->{'files'}{'mp3'}}, $temp;
#        }
#        undef($books{$etext_no}->{'files'}{$key});
#      }
#    }
#  }

  if(exists $books{$etext_no}->{'files'}{'htm'}
     && substr(dirname(${$books{$etext_no}->{'files'}{'htm'}}[0]), 0 -2) eq "-h")
  {
    @{$books{$etext_no}->{'files'}{'htm'}} = (dirname(${$books{$etext_no}->{'files'}{'htm'}}[0]));
  }

if(@matches = grep(/\-8\.txt/, @{$books{$etext_no}->{'files'}{'txt'}}))
{
  @{$books{$etext_no}->{'files'}{'txt'}} = @matches;
#  foreach $match(@matches)
#  {
#    delete ${$books{$etext_no}->{'files'}{'txt'}}[$match];
#  }
}
elsif(@matches = grep(/\-0\.txt/, @{$books{$etext_no}->{'files'}{'txt'}}))
{
  @{$books{$etext_no}->{'files'}{'txt'}} = @matches;
#  foreach $match(@matches)
#  {
#    delete ${$books{$etext_no}->{'files'}{'txt'}}[$match];
#  }
}
elsif(@matches = grep(/\[^(\-7)]\.txt/, @{$books{$etext_no}->{'files'}{'txt'}}))
{
  @{$books{$etext_no}->{'files'}{'txt'}} = @matches;
#  foreach $match(@matches)
#  {
#    delete ${$books{$etext_no}->{'files'}{'txt'}}[$match];
#  }
}

  # create a row insertion statement for each format in which this etext is available, and load these statements
  # into @sql_commands so they can be entered rapidly after deleting the old records
  foreach my $key(keys %{$books{$etext_no}->{'files'}})
  {
    my $size;

    foreach my $relpath(@{$books{$etext_no}->{'files'}{$key}})
    {
      my $filepath = $mirrorpath . $relpath;
      $size += rfilesize($filepath);
    }

    $sql = "INSERT INTO formats_sizes VALUES ('" . $etext_no . "','" . quotemeta($titles) . "','" .
           quotemeta($authors) . "','" . $language . "','" . $key . "','" . $size . "','" .
           join(";", @{$books{$etext_no}->{'files'}{$key}}) . "','" . $copyrighted . "')";
    push(@sql_commands, $sql);
  }

  # clear variables for next etext
  foreach $key(keys %formatfiles)
  {
    undef(@{$formatfiles{$key}});
    undef($formatfiles{$key});
    undef(@{$sizes{$key}});
    undef($sizes{$key});
  }
  undef(@formatfiles);
  undef($mp3switch);
}

# delete the old records and immediately perform all the pre-loaded insertion statements.
# this is done to minimize table downtime
$dbh->do("DELETE FROM formats_sizes");
foreach $sql(@sql_commands)
{
  $dbh->do($sql);
}

# recursive file size function
sub rfilesize
{
  my $location = $_[0];
  my $totalsize;
  my @contents;

  if(-f $location)
  {
    $st = stat($location);
    return $st->size;
  }
  else
  {
    opendir(DIR, $location);
    while($item = readdir(DIR))
    {
      push(@contents, $item);
    }
    closedir(DIR);

    foreach $item(@contents)
    {
      if($item ne "." && $item ne "..")
      {
        $totalsize += rfilesize($location . "/" . $item);
      }
    }
  }

  return $totalsize;
}
